#!/bin/sh

# client_* if not configured -> Error
# run_server if not configured -> configure else run
# configure 

set -eu

CFDIR=/etc/openvpn
PKI=${CFDIR}/pki
export EASYRSA_PKI=${PKI}
export EASYRSA=/usr/share/easy-rsa

# PROTO=tcp
# ADDR=$(hostname -i)
# PORT=1194
# IP
# MASK
# ROUTED=1
# ROUTES
# DEFROUTE
# DNS


if [ ! -f $CFDIR/.configured ]; then
    # fix mounting volume from FS
    [ ! -f ${CFDIR}/up.sh ] && cp -a ${CFDIR}.std/up.sh ${CFDIR}/
    [ ! -f ${CFDIR}/down.sh ] && cp -a ${CFDIR}.std/down.sh ${CFDIR}/

fi
usage () {
    if [ "${1:+yes}" = "yes" ]; then
        echo "$*"
        echo
    fi
    echo "docker run stim/openvpn-dkr [config|client_new|client_get] [options]"
    echo "        w/o arguments it run OpenVPN server according to prevoisly"
    echo "        generated config. If no config was generated or some options are"
    echo "        specified on the line starting with '-' sign, then it first run"
    echo "        configure step as <config> command was passed then run server."
    echo "\n    By default routed networking wil be used with attempt to route"
    echo "      all localy configured networks\n"
    echo "    config [options]"
    echo "        run configure step - generate PKI and client server configs:"
    echo "      --uri proto://public_address:port"
    echo "        specifieces target server endpoint proto can be udp or tcp,"
    echo "        public_address - should be ip or DNS name of server externaly"
    echo "        available for clients, port - denotes port openvpn server should"
    echo "        listen on"
    echo "      --reinit"
    echo "        regenerate PKI, with new CA and server crt/key"
    echo "      --bridged [ip/bits start_ip end_ip]"
    echo "        use tap device and build bridged networking for clients."
    echo "        ip/bits - is address and netmask in CIDR notation of server in"
    echo "        bridged network, client gets addresses from start_ip to end_ip,"
    echo "        by default it gets 10.57.0.1/16 10.57.0.4 10.57.254.253"
    echo "      --routed [ip/bits]"
    echo "        use tun device and build routed networking for clients."
    echo "        ip/bits - ip address for server and netmask for network in"
    echo "        CIDR notation"

}

init_pki () {
    echo "Initializing PKI ..."
    easyrsa --batch init-pki
    easyrsa --batch gen-dh
    openvpn --genkey --secret $PKI/ta.key
    easyrsa --batch build-ca nopass
    easyrsa --batch build-server-full server nopass
    touch $PKI/.initialized
}

bits2mask () {
    local bits=$1
    local full_octet=$((bits / 8))
    local rest=$((bits % 8))
    local c=4
    local mask
    while [ $c -gt 0 ]; do
        [ -n "${mask:-}" ] && mask="$mask."
        if [ $full_octet -gt 0 ]; then
            mask="${mask:-}255"
            full_octet=$((full_octet - 1))
        elif [ $rest -gt 0 ]; then
            mask="${mask:-}$(( (255 << (8 - rest) ) & 255 ))"
            rest=0
        else
            mask="${mask:-}0"
        fi
        c=$((c - 1))
    done
    echo $mask
}

mk_tun () {
    mkdir -p /dev/net
    if [ ! -c /dev/net/tun ]; then
        mknod /dev/net/tun c 10 200
    fi
}



mk_configs () {
    while [ "${1:-}" != "" ]; do
        case "$1" in
            --reinit) shift; init_pki;;
            --uri)
                shift
                if [ -z "${1:-}" ] || [ "${1#--}" != "$1" ]; then
                    usage "Error --uri w/o arg given"
                    exit 1
                fi
                PROTO=${1%%:*}
                ADDR=${1#*://}
                PORT=${ADDR##*:}
                ADDR=${ADDR%%:*}
                local chk=$1
                [ "$PORT" = "$ADDR" ] && PORT=1194 && chk="$chk:1194"
                if [ "$PROTO://$ADDR:$PORT" != "$chk" ]; then
                    usage "Error in URI"
                    exit 1
                fi
                shift
            ;;
            --bridged)
                shift
                ROUTED="no"
                if [ -z "${1:-}" ] || [ "${1#--}" != "$1" ]; then
                    IP="10.57.0.1"
                    MASK="255.255.0.0"
                    BSTART="10.57.0.4"
                    BEND="10.57.254.253"
                elif [ "$1" = "dhcp" ]; then
                    IP=""
                    MASK=""
                    BSTART=""
                    BEND=""
                    shift
                elif [ -z "${2:-}" -o -z "${3:-}" ]; then
                    usage "Error --bridged w/o arg given"
                    exit 1
                else
                    IP=${1%/*}
                    bits=${1#*/}
                    if [ "$IP/$bits" != "$1" ]; then
                        usage "Bad value to --bridged flag"
                        exit 1
                    fi
                    MASK=$(bits2mask $bits)
                    BSTART="$2"
                    BEND="$3"
                    shift 3
                fi
            ;;
            --routed)
                shift
                ROUTED="yes"
                if [ -z "${1:-}" ] || [ "${1#--}" != "$1" ]; then
                    IP="10.57.0.0"
                    MASK="255.255.0.0"
                else
                    IP=${1%/*}
                    BITS=${1#*/}
                    if [ "$IP/$BITS" != "$1" ]; then
                        usage "Bad value to --routed flag"
                        exit 1
                    fi
                    MASK=$(bits2mask $BITS)
                fi
                shift
            ;;
            --route-all)
                shift
                DEFROUTE="push \"redirect-gateway def1"
                while [ -n "${1:-}" -a "${1#--}" = "$1" ]; do
                    DEFROUTE="$DEFROUTE $1"
                    shift
                done
                DEFROUTE="$DEFROUTE\""
            ;;
            --route-add)
                shift
                ip=${1%/*}
                bits=${1#*/}
                if [ "$ip/$bits" != "$1" ]; then
                    usage "Bad value to --add-route flag"
                    exit 1
                fi
                mask=$(bits2mask $bits)
                ROUTES="${ROUTES:-}push \"route $ip $mask\"\n"
                shift
            ;;
            --set-dns)
                shift
                if [ -z "${1:-}" ] || [ "${1#--}" != "$1" ]; then
                    usage "Error: no arg to --set-dns option"
                    exit 1
                fi
                DNS="push \"dhcp-option DNS $1\""
                shift
            ;;
            *)
                usage "Unknown options follows '$*'"
                exit 1
            ;;
        esac
    done
    [ -z "${ADDR:-}" ] && usage "--uri must be given once" && exit 1
    [ ! -f $PKI/.initialized ] && init_pki
    echo "Configuring ..."
    {
        echo "dh $PKI/dh.pem"
        echo "ca $PKI/ca.crt"
        echo "cert $PKI/issued/server.crt"
        echo "key $PKI/private/server.key"
        echo "tls-auth $PKI/ta.key 0"
        echo "remote-cert-tls client"
        echo ""
        echo "cipher AES-256-GCM"
        echo "ncp-ciphers AES-128-CBC:AES-128-CFB:AES-128-CFB1:AES-128-CFB8:AES-128-GCM:AES-128-OFB:AES-256-CBC:AES-256-CFB:AES-256-CFB1:AES-256-CFB8:AES-256-GCM:AES-256-OFB:CAMELLIA-256-CBC:CAMELLIA-256-CFB:CAMELLIA-256-CFB1:CAMELLIA-256-CFB8:CAMELLIA-256-OFB"
        echo "comp-lzo"
        echo "push \"comp-lzo\""
        echo ";max-clients 100"
        echo ""
        echo "user nobody"
        echo "group nobody"
        echo ""
        echo "status /tmp/openvpn-status.log"
        echo "status-version 3"
        echo "log-append /dev/stdout"
        echo "verb 3"
        echo "mute 20"
        echo ""
        [ "${PROTO:-tcp}" = "udp" ] && echo "explicit-exit-notify 1"
        echo ""
        echo ";local $(hostname -i)"
        echo "persist-key"
        echo "persist-tun"
        echo "keepalive 10 120"
        echo "topology subnet"
        echo "port ${PORT:-1194}"
        echo "proto ${PROTO:-tcp}"
        if [ "${ROUTED:-yes}" = "yes" ]; then
            echo "dev tun"
            echo "server ${IP:-10.57.0.0} ${MASK:-255.255.0.0}"
        else
            # echo "Not implemented yet"
            # exit 99
            echo "dev tap"
            echo "server-bridge ${IP:-} ${MASK:-} ${BSTART:-} ${BEND:-}"
        fi
        echo "ifconfig-pool-persist /etc/openvpn/ipp.txt"
        if [ -z "${DEFROUTE:-}" ]; then
            printf "${ROUTES:-}${ROUTES:+\n}"
        else
            echo "${DEFROUTE}"
        fi
        printf "${DNS:-}${DNS:+\n}"
    } > $CFDIR/server.conf
    {
        echo "client"
        if [ "${ROUTED:-yes}" = "yes" ]; then
            echo "dev tun"
        else
            echo "dev tap"
        fi
        echo "proto ${PROTO:-tcp}"
        echo "remote $ADDR ${PORT:-1194}"
        echo "resolv-retry infinite"
        echo "pull"
        echo "nobind"
        # echo "user nobody"
        # echo "group nobody"
        echo "persist-key"
        echo "persist-tun"
        # echo "remote-cert-tls server"
        # echo "cipher AES-256-GCM"
        # echo "comp-lzo"
        echo "verb 3"

    } > $CFDIR/client.conf
    echo "#!/bin/sh" >> $CFDIR/ipt_up
    echo "iptables -F" >> $CFDIR/ipt_up
    echo "iptables -t nat -A POSTROUTING -s ${IP:-10.57.0.0}/${BITS:-16} -o eth0 -j MASQUERADE" >> $CFDIR/ipt_up
    chmod 755 $CFDIR/ipt_up
    touch $CFDIR/.configured
    return 0
}

run_server () {
    if [ ! -f $CFDIR/.configured ]; then
        mk_configs
    fi
    echo "Launching server ..."
    if grep -q 'dev tun' $CFDIR/server.conf ; then
        mk_tun
        $CFDIR/ipt_up
    fi

    /usr/sbin/openvpn $CFDIR/server.conf
}

client_new () {
    echo "Register new client ..." >&2
    [ ! -f $PKI/.initialized ] && echo "Error: PKI not initialized" && exit 1
    [ -z "${1:-}" ] && echo "Error: no client name supplied"
    touch "/tmp/$1"
    [ ! -f "/tmp/$1" ] && echo "Error: unappropriate clientname supplied 2" && exit 1
    rm -f "/tmp/$1"
    easyrsa --batch build-client-full "$1" nopass
    return 0
}

client_get () {
    echo "Generating client configs ..." >&2
    cn=${1:-}
    shift
    [ -z "$cn" ] && echo "Client name must be given"
    if [ -f "$PKI/issued/$cn.crt" -a -f "$PKI/private/$cn.key" ]; then
        case ${1:-combo} in
            ca) cat "$PKI/ca.crt" ;;
            ta) cat "$PKI/ta.key" ;;
            cert) cat "$PKI/issued/$cn.crt" ;;
            key) cat "$PKI/private/$cn.key" ;;
            cf)
                echo "ca ca.crt"
                echo "cert $cn.crt"
                echo "key $cn.key"
                echo "tls-auth ta.key 1"
                echo ""
                cat $CFDIR/client.conf
            ;;
            combo)
                cat $CFDIR/client.conf
                echo "key-direction 1"
                echo ""
                echo "<ca>"
                cat $PKI/ca.crt
                echo "</ca>"
                echo ""
                echo "<cert>"
                cat "$PKI/issued/$cn.crt"
                echo "</cert>"
                echo ""
                echo "<key>"
                cat "$PKI/private/$cn.key"
                echo "</key>"
                echo ""
                echo "<tls-auth>"
                cat $PKI/ta.key
                echo "</tls-auth>"
            ;;
            *) echo "Unknown request"; exit 1 ;;
        esac
    else
        echo "No client found with name '$cn'"
        exit 1
    fi
    return 0
}

#  d88888b d8b   db d888888b d8888b. db    db      d8888b.  .d88b.  d888888b d8b   db d888888b 
#  88'     888o  88 `~~88~~' 88  `8D `8b  d8'      88  `8D .8P  Y8.   `88'   888o  88 `~~88~~' 
#  88ooooo 88V8o 88    88    88oobY'  `8bd8'       88oodD' 88    88    88    88V8o 88    88    
#  88~~~~~ 88 V8o88    88    88`8b      88         88~~~   88    88    88    88 V8o88    88    
#  88.     88  V888    88    88 `88.    88         88      `8b  d8'   .88.   88  V888    88    
#  Y88888P VP   V8P    YP    88   YD    YP         88       `Y88P'  Y888888P VP   V8P    YP    

if [ $# -eq 0 ] ; then
    run_server
else
    case $1 in
        -*) mk_configs "$@"; run_server;;
        config) shift; mk_configs "$@";;
        client_new) shift; client_new "$@";;
        client_get) shift; client_get "$@";;
        *) exec "$@" ;;
    esac
fi
exit 0
